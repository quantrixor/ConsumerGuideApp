//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsumerGuideApp.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    
    public partial class ConsumerGuideDBEntities : DbContext
    {
        public ConsumerGuideDBEntities()
            : base("name=ConsumerGuideDBEntities")
        {
        }
        public virtual DbSet<Companies> Companies { get; set; }
        public virtual DbSet<OwnershipTypes> OwnershipTypes { get; set; }
        public virtual DbSet<ServiceCategories> ServiceCategories { get; set; }
        public virtual DbSet<Services> Services { get; set; }
        public virtual DbSet<Specializations> Specializations { get; set; }

        public DbSet<CompanyService> CompanyServices { get; set; }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Companies>()
                .HasRequired(c => c.OwnershipTypes)
                .WithMany()
                .HasForeignKey(c => c.OwnershipTypeID);

            modelBuilder.Entity<Companies>()
                .HasRequired(c => c.Specializations)
                .WithMany()
                .HasForeignKey(c => c.SpecializationID);

            modelBuilder.Entity<CompanyService>()
                .HasKey(cs => new { cs.CompanyID, cs.ServiceID });

            modelBuilder.Entity<CompanyService>()
                .HasRequired(cs => cs.Company)
                .WithMany(c => c.CompanyServices)
                .HasForeignKey(cs => cs.CompanyID);

            modelBuilder.Entity<CompanyService>()
                .HasRequired(cs => cs.Service)
                .WithMany(s => s.CompanyServices)
                .HasForeignKey(cs => cs.ServiceID);
        }
    }
}
